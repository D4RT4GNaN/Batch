
package generatedlibraryservice;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "LibraryService", targetNamespace = "http://LibraryService/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface LibraryService {


    /**
     * 
     * @param email
     * @return
     *     returns java.lang.String
     * @throws ForgotPasswordException
     */
    @WebMethod(action = "http://LibraryService/requestPasswordReset")
    @WebResult(name = "token", targetNamespace = "")
    @RequestWrapper(localName = "requestPasswordReset", targetNamespace = "http://LibraryService/", className = "generatedlibraryservice.RequestPasswordReset")
    @ResponseWrapper(localName = "requestPasswordResetResponse", targetNamespace = "http://LibraryService/", className = "generatedlibraryservice.RequestPasswordResetResponse")
    @Action(input = "http://LibraryService/requestPasswordReset", output = "http://LibraryService/LibraryService/requestPasswordResetResponse", fault = {
        @FaultAction(className = ForgotPasswordException.class, value = "http://LibraryService/LibraryService/requestPasswordReset/Fault/ForgotPasswordException")
    })
    public String requestPasswordReset(
        @WebParam(name = "email", targetNamespace = "")
        String email)
        throws ForgotPasswordException
    ;

    /**
     * 
     * @param confirmNewPassword
     * @param newPassword
     * @param token
     * @return
     *     returns boolean
     */
    @WebMethod(action = "http://LibraryService/resetPassword")
    @WebResult(name = "reset", targetNamespace = "")
    @RequestWrapper(localName = "resetPassword", targetNamespace = "http://LibraryService/", className = "generatedlibraryservice.ResetPassword")
    @ResponseWrapper(localName = "resetPasswordResponse", targetNamespace = "http://LibraryService/", className = "generatedlibraryservice.ResetPasswordResponse")
    @Action(input = "http://LibraryService/resetPassword", output = "http://LibraryService/LibraryService/resetPasswordResponse")
    public boolean resetPassword(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "newPassword", targetNamespace = "")
        String newPassword,
        @WebParam(name = "confirmNewPassword", targetNamespace = "")
        String confirmNewPassword);

    /**
     * 
     * @param confirmNewPassword
     * @param newPassword
     * @param email
     * @return
     *     returns boolean
     */
    @WebMethod(action = "http://LibraryService/updatePassword")
    @WebResult(name = "updated", targetNamespace = "")
    @RequestWrapper(localName = "updatePassword", targetNamespace = "http://LibraryService/", className = "generatedlibraryservice.UpdatePassword")
    @ResponseWrapper(localName = "updatePasswordResponse", targetNamespace = "http://LibraryService/", className = "generatedlibraryservice.UpdatePasswordResponse")
    @Action(input = "http://LibraryService/updatePassword", output = "http://LibraryService/LibraryService/updatePasswordResponse")
    public boolean updatePassword(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "newPassword", targetNamespace = "")
        String newPassword,
        @WebParam(name = "confirmNewPassword", targetNamespace = "")
        String confirmNewPassword);

    /**
     * 
     * @param usager
     * @param email
     * @return
     *     returns boolean
     * @throws UpdateUserException
     */
    @WebMethod(action = "http://LibraryService/updateUserInfos")
    @WebResult(name = "updated", targetNamespace = "")
    @RequestWrapper(localName = "updateUserInfos", targetNamespace = "http://LibraryService/", className = "generatedlibraryservice.UpdateUserInfos")
    @ResponseWrapper(localName = "updateUserInfosResponse", targetNamespace = "http://LibraryService/", className = "generatedlibraryservice.UpdateUserInfosResponse")
    @Action(input = "http://LibraryService/updateUserInfos", output = "http://LibraryService/LibraryService/updateUserInfosResponse", fault = {
        @FaultAction(className = UpdateUserException.class, value = "http://LibraryService/LibraryService/updateUserInfos/Fault/UpdateUserException")
    })
    public boolean updateUserInfos(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "usager", targetNamespace = "")
        GeneratedUsager usager)
        throws UpdateUserException
    ;

    /**
     * 
     * @param userID
     * @return
     *     returns java.util.List<generatedlibraryservice.GeneratedBorrowing>
     */
    @WebMethod(action = "http://LibraryService/getBorrowingFor")
    @WebResult(name = "booksBorrowed", targetNamespace = "")
    @RequestWrapper(localName = "getBorrowingFor", targetNamespace = "http://LibraryService/", className = "generatedlibraryservice.GetBorrowingFor")
    @ResponseWrapper(localName = "getBorrowingForResponse", targetNamespace = "http://LibraryService/", className = "generatedlibraryservice.GetBorrowingForResponse")
    @Action(input = "http://LibraryService/getBorrowingFor", output = "http://LibraryService/LibraryService/getBorrowingForResponse")
    public List<GeneratedBorrowing> getBorrowingFor(
        @WebParam(name = "userID", targetNamespace = "")
        int userID);

    /**
     * 
     * @return
     *     returns java.util.List<generatedlibraryservice.GeneratedBorrowing>
     */
    @WebMethod(action = "http://LibraryService/checkExpiration")
    @WebResult(name = "overdueBorrowings", targetNamespace = "")
    @RequestWrapper(localName = "checkExpiration", targetNamespace = "http://LibraryService/", className = "generatedlibraryservice.CheckExpiration")
    @ResponseWrapper(localName = "checkExpirationResponse", targetNamespace = "http://LibraryService/", className = "generatedlibraryservice.CheckExpirationResponse")
    @Action(input = "http://LibraryService/checkExpiration", output = "http://LibraryService/LibraryService/checkExpirationResponse")
    public List<GeneratedBorrowing> checkExpiration();

    /**
     * 
     * @param comment
     * @return
     *     returns generatedlibraryservice.GeneratedComment
     */
    @WebMethod(action = "http://LibraryService/addComment")
    @WebResult(name = "savedComment", targetNamespace = "")
    @RequestWrapper(localName = "addComment", targetNamespace = "http://LibraryService/", className = "generatedlibraryservice.AddComment")
    @ResponseWrapper(localName = "addCommentResponse", targetNamespace = "http://LibraryService/", className = "generatedlibraryservice.AddCommentResponse")
    @Action(input = "http://LibraryService/addComment", output = "http://LibraryService/LibraryService/addCommentResponse")
    public GeneratedComment addComment(
        @WebParam(name = "comment", targetNamespace = "")
        GeneratedComment comment);

    /**
     * 
     * @param bookReference
     * @return
     *     returns java.util.List<generatedlibraryservice.GeneratedStock>
     */
    @WebMethod(action = "http://LibraryService/getBookAvailability")
    @WebResult(name = "bookAvailability", targetNamespace = "")
    @RequestWrapper(localName = "getBookAvailability", targetNamespace = "http://LibraryService/", className = "generatedlibraryservice.GetBookAvailability")
    @ResponseWrapper(localName = "getBookAvailabilityResponse", targetNamespace = "http://LibraryService/", className = "generatedlibraryservice.GetBookAvailabilityResponse")
    @Action(input = "http://LibraryService/getBookAvailability", output = "http://LibraryService/LibraryService/getBookAvailabilityResponse")
    public List<GeneratedStock> getBookAvailability(
        @WebParam(name = "bookReference", targetNamespace = "")
        String bookReference);

    /**
     * 
     * @param libraryId
     * @param usager
     * @param bookReference
     * @return
     *     returns generatedlibraryservice.GeneratedBorrowing
     */
    @WebMethod(action = "http://LibraryService/borrowABook")
    @WebResult(name = "borrowing", targetNamespace = "")
    @RequestWrapper(localName = "borrowABook", targetNamespace = "http://LibraryService/", className = "generatedlibraryservice.BorrowABook")
    @ResponseWrapper(localName = "borrowABookResponse", targetNamespace = "http://LibraryService/", className = "generatedlibraryservice.BorrowABookResponse")
    @Action(input = "http://LibraryService/borrowABook", output = "http://LibraryService/LibraryService/borrowABookResponse")
    public GeneratedBorrowing borrowABook(
        @WebParam(name = "libraryId", targetNamespace = "")
        int libraryId,
        @WebParam(name = "bookReference", targetNamespace = "")
        String bookReference,
        @WebParam(name = "usager", targetNamespace = "")
        GeneratedUsager usager);

    /**
     * 
     * @param libraryId
     * @param usager
     * @param borrowingDate
     * @param bookReference
     * @return
     *     returns boolean
     * @throws BookBorrowingExtensionException
     */
    @WebMethod(action = "http://LibraryService/extendBookBorrowing")
    @WebResult(name = "extended", targetNamespace = "")
    @RequestWrapper(localName = "extendBookBorrowing", targetNamespace = "http://LibraryService/", className = "generatedlibraryservice.ExtendBookBorrowing")
    @ResponseWrapper(localName = "extendBookBorrowingResponse", targetNamespace = "http://LibraryService/", className = "generatedlibraryservice.ExtendBookBorrowingResponse")
    @Action(input = "http://LibraryService/extendBookBorrowing", output = "http://LibraryService/LibraryService/extendBookBorrowingResponse", fault = {
        @FaultAction(className = BookBorrowingExtensionException.class, value = "http://LibraryService/LibraryService/extendBookBorrowing/Fault/BookBorrowingExtensionException")
    })
    public boolean extendBookBorrowing(
        @WebParam(name = "borrowingDate", targetNamespace = "")
        XMLGregorianCalendar borrowingDate,
        @WebParam(name = "libraryId", targetNamespace = "")
        int libraryId,
        @WebParam(name = "bookReference", targetNamespace = "")
        String bookReference,
        @WebParam(name = "usager", targetNamespace = "")
        GeneratedUsager usager)
        throws BookBorrowingExtensionException
    ;

    /**
     * 
     * @param libraryId
     * @param usager
     * @param borrowingDate
     * @param bookReference
     * @return
     *     returns java.lang.String
     */
    @WebMethod(action = "http://LibraryService/returnBook")
    @WebResult(name = "status", targetNamespace = "")
    @RequestWrapper(localName = "returnBook", targetNamespace = "http://LibraryService/", className = "generatedlibraryservice.ReturnBook")
    @ResponseWrapper(localName = "returnBookResponse", targetNamespace = "http://LibraryService/", className = "generatedlibraryservice.ReturnBookResponse")
    @Action(input = "http://LibraryService/returnBook", output = "http://LibraryService/LibraryService/returnBookResponse")
    public String returnBook(
        @WebParam(name = "borrowingDate", targetNamespace = "")
        XMLGregorianCalendar borrowingDate,
        @WebParam(name = "libraryId", targetNamespace = "")
        int libraryId,
        @WebParam(name = "bookReference", targetNamespace = "")
        String bookReference,
        @WebParam(name = "usager", targetNamespace = "")
        GeneratedUsager usager);

    /**
     * 
     * @param keyword
     * @return
     *     returns java.util.List<generatedlibraryservice.GeneratedBook>
     */
    @WebMethod(action = "http://LibraryService/getBooksWithKeyword")
    @WebResult(name = "listBooks", targetNamespace = "")
    @RequestWrapper(localName = "getBooksWithKeyword", targetNamespace = "http://LibraryService/", className = "generatedlibraryservice.GetBooksWithKeyword")
    @ResponseWrapper(localName = "getBooksWithKeywordResponse", targetNamespace = "http://LibraryService/", className = "generatedlibraryservice.GetBooksWithKeywordResponse")
    @Action(input = "http://LibraryService/getBooksWithKeyword", output = "http://LibraryService/LibraryService/getBooksWithKeywordResponse")
    public List<GeneratedBook> getBooksWithKeyword(
        @WebParam(name = "keyword", targetNamespace = "")
        String keyword);

    /**
     * 
     * @param generatedUsager
     * @return
     *     returns java.lang.String
     * @throws RegisterException
     */
    @WebMethod(action = "http://LibraryService/addUser")
    @WebResult(name = "token", targetNamespace = "")
    @RequestWrapper(localName = "addUser", targetNamespace = "http://LibraryService/", className = "generatedlibraryservice.AddUser")
    @ResponseWrapper(localName = "addUserResponse", targetNamespace = "http://LibraryService/", className = "generatedlibraryservice.AddUserResponse")
    @Action(input = "http://LibraryService/addUser", output = "http://LibraryService/LibraryService/addUserResponse", fault = {
        @FaultAction(className = RegisterException.class, value = "http://LibraryService/LibraryService/addUser/Fault/RegisterException")
    })
    public String addUser(
        @WebParam(name = "generatedUsager", targetNamespace = "")
        GeneratedUsager generatedUsager)
        throws RegisterException
    ;

    /**
     * 
     * @param identifier
     * @param password
     * @return
     *     returns generatedlibraryservice.GeneratedUsager
     * @throws LoginException
     */
    @WebMethod(action = "http://LibraryService/connectUser")
    @WebResult(name = "user", targetNamespace = "")
    @RequestWrapper(localName = "connectUser", targetNamespace = "http://LibraryService/", className = "generatedlibraryservice.ConnectUser")
    @ResponseWrapper(localName = "connectUserResponse", targetNamespace = "http://LibraryService/", className = "generatedlibraryservice.ConnectUserResponse")
    @Action(input = "http://LibraryService/connectUser", output = "http://LibraryService/LibraryService/connectUserResponse", fault = {
        @FaultAction(className = LoginException.class, value = "http://LibraryService/LibraryService/connectUser/Fault/LoginException")
    })
    public GeneratedUsager connectUser(
        @WebParam(name = "identifier", targetNamespace = "")
        String identifier,
        @WebParam(name = "password", targetNamespace = "")
        String password)
        throws LoginException
    ;

    /**
     * 
     * @param token
     * @return
     *     returns boolean
     */
    @WebMethod(action = "http://LibraryService/validEmailWith")
    @WebResult(name = "valid", targetNamespace = "")
    @RequestWrapper(localName = "validEmailWith", targetNamespace = "http://LibraryService/", className = "generatedlibraryservice.ValidEmailWith")
    @ResponseWrapper(localName = "validEmailWithResponse", targetNamespace = "http://LibraryService/", className = "generatedlibraryservice.ValidEmailWithResponse")
    @Action(input = "http://LibraryService/validEmailWith", output = "http://LibraryService/LibraryService/validEmailWithResponse")
    public boolean validEmailWith(
        @WebParam(name = "token", targetNamespace = "")
        String token);

    /**
     * 
     * @param email
     * @return
     *     returns boolean
     * @throws EmailSendingException
     */
    @WebMethod(action = "http://LibraryService/resendVerificationEmail")
    @WebResult(name = "sent", targetNamespace = "")
    @RequestWrapper(localName = "resendVerificationEmail", targetNamespace = "http://LibraryService/", className = "generatedlibraryservice.ResendVerificationEmail")
    @ResponseWrapper(localName = "resendVerificationEmailResponse", targetNamespace = "http://LibraryService/", className = "generatedlibraryservice.ResendVerificationEmailResponse")
    @Action(input = "http://LibraryService/resendVerificationEmail", output = "http://LibraryService/LibraryService/resendVerificationEmailResponse", fault = {
        @FaultAction(className = EmailSendingException.class, value = "http://LibraryService/LibraryService/resendVerificationEmail/Fault/EmailSendingException")
    })
    public boolean resendVerificationEmail(
        @WebParam(name = "email", targetNamespace = "")
        String email)
        throws EmailSendingException
    ;

}
